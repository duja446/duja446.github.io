<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>advent of code 2022 on Duja446 Blog</title><link>https://duja446.github.io/tags/advent-of-code-2022/</link><description>Recent content in advent of code 2022 on Duja446 Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 21 Dec 2022 21:33:59 +0100</lastBuildDate><atom:link href="https://duja446.github.io/tags/advent-of-code-2022/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent of Code 2022 - Day 05</title><link>https://duja446.github.io/posts/2022-12-21-advent-of-code-2022-day-05/</link><pubDate>Wed, 21 Dec 2022 21:33:59 +0100</pubDate><guid>https://duja446.github.io/posts/2022-12-21-advent-of-code-2022-day-05/</guid><description>Day 05 The main challenge for this day is manipulating the datastructure which consists of n stacks. Having peek, pop and conj functions makes this job easier. First we represent the structure as vector of lists of characters. I added an empty list in the first place because the &amp;lsquo;commands&amp;rsquo; in the challenge start from 1 not from 0.
1; [D] 2;[N] [C] 3;[Z] [M] [P] 4; 1 2 3 5(def sample-input 6 [&amp;#39;() &amp;#39;(\N \Z) &amp;#39;(\D \C \M) &amp;#39;(\P)]) The parsing of &amp;lsquo;commands&amp;rsquo; is similar to what we have been doing in the previous challenges.</description></item><item><title>Advent of Code 2022 - Day 06</title><link>https://duja446.github.io/posts/2022-12-21-advent-of-code-2022-day-06/</link><pubDate>Wed, 21 Dec 2022 19:15:54 +0100</pubDate><guid>https://duja446.github.io/posts/2022-12-21-advent-of-code-2022-day-06/</guid><description>Day 06 This challenge invloved getting every possible sequence of four adjacent characters and seeing if the characters are distinct. This invloved creating a recursive function because there was no built in function to do the task.
Part 1 We introduce a variable j which starts at 4 and then take a substring of the main string from j - 4 to j to get the four adjacent characters. We then expland this structure with apply and check if all the elements are distint with distinct?</description></item><item><title>Advent of Code 2022 - Day 04</title><link>https://duja446.github.io/posts/2022-12-21-advent-of-code-2022-day-04/</link><pubDate>Wed, 21 Dec 2022 19:14:55 +0100</pubDate><guid>https://duja446.github.io/posts/2022-12-21-advent-of-code-2022-day-04/</guid><description>Day 04 This challenge didn&amp;rsquo;t involve a whole lot of programming just some clever math. To solve it we first parse the input so each row is a vector of four numbers. We then filter this structure by the needs of the challenge
1(defn number-list 2 [s] 3 (map 4 (comp (partial map parse-long) #(string/split % #&amp;#34;[-,]&amp;#34;)) 5 (string/split s #&amp;#34;\n *&amp;#34;))) First split the rows and then split numbers which are divided by - or ,.</description></item><item><title>Advent of Code 2022 - Day 03</title><link>https://duja446.github.io/posts/2022-12-20-advent-of-code-2022-day-03/</link><pubDate>Tue, 20 Dec 2022 15:36:35 +0100</pubDate><guid>https://duja446.github.io/posts/2022-12-20-advent-of-code-2022-day-03/</guid><description>Day 03 The algorithm for this challenge is pretty straightforward:
Parse the input into list of string Split each string in the middle Find the letter that occurs in both string Convert the letter to a number using the provided method Sum the numbers This algorithm works for the first part, and needs a little change to solve the second part.
1(defn to-lines 2 &amp;#34;Splits the input into lines&amp;#34; 3 [s] 4 (string/split s #&amp;#34;\n *&amp;#34;)) 5 6(defn split-middle 7 &amp;#34;Split a string in the middle&amp;#34; 8 [s] 9 (let [length (count s) 10 midpoint (quot length 2) 11 front (subs s 0 midpoint) 12 back (subs s midpoint length)] 13 [front back])) 14 15(defn appears-in-all 16 &amp;#34;Find a letter common to all strings&amp;#34; 17 [strings] 18 (first (apply set/intersection (map set strings)))) 19 20(def priority (zipmap 21 &amp;#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34; 22 (range 1 53))) To find a common letter I converted strings into sets that contain only one occurance of each letter.</description></item><item><title>Advent of Code 2022 - Day 02</title><link>https://duja446.github.io/posts/2022-12-20-advent-of-code-2022-day-02/</link><pubDate>Tue, 20 Dec 2022 15:36:15 +0100</pubDate><guid>https://duja446.github.io/posts/2022-12-20-advent-of-code-2022-day-02/</guid><description>Day 02 To solve this problem I had to first find a score for the input (game of rock, paper, scissors), and then sum them up. I decided to encode each outcome in a map where the key is the game and the output is the number of points which that game awards.
1(def ROCK 1) 2(def PAPER 2) 3(def SCISSORS 3) 4 5(def LOSE 0) 6(def DRAW 3) 7(def WIN 6) 8 9(def scores1 { 10 &amp;#34;A X&amp;#34; (+ ROCK DRAW) 11 &amp;#34;A Y&amp;#34; (+ PAPER WIN) 12 &amp;#34;A Z&amp;#34; (+ SCISSORS LOSE) 13 14 &amp;#34;B X&amp;#34; (+ ROCK LOSE) 15 &amp;#34;B Y&amp;#34; (+ PAPER DRAW) 16 &amp;#34;B Z&amp;#34; (+ SCISSORS WIN) 17 18 &amp;#34;C X&amp;#34; (+ ROCK WIN) 19 &amp;#34;C Y&amp;#34; (+ PAPER LOSE) 20 &amp;#34;C Z&amp;#34; (+ SCISSORS DRAW) 21 }) Part 1 Then the actual solving is pretty easy just split the input into lines and then map over it with scores1.</description></item><item><title>Advent of Code 2022 - Day 01</title><link>https://duja446.github.io/posts/2022-12-19-advent-of-code-day-01/</link><pubDate>Mon, 19 Dec 2022 15:07:29 +0100</pubDate><guid>https://duja446.github.io/posts/2022-12-19-advent-of-code-day-01/</guid><description>Day 01 This problem boils down to being able to parse the input and being able to sum the total calories for each elf. For the parsing I used regex to first get all the calories of one elf with regex \n *\n * which maches anything between two newline characters. Then to convert paragraphs to lines I matched a newline character with any number of whitespaces.
1(defn paragraph-lines 2 &amp;#34;Splits s intro paragraphs and paragraphs to lines&amp;#34; 3 [s] 4 (map (#(string/split % #&amp;#34;\n *&amp;#34;)) (string/split s #&amp;#34;\n *\n *&amp;#34;))) Next I needed to sum calories of one elf which is just parsing and summing all the values from one row.</description></item></channel></rss>